package ptc;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.StreamMaxInfo;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class DetermineWindowMaxPixelKernel extends Kernel {
	private static final boolean DEBUG_ENABLE = false;
	private final WinMaxCoordRadiusType winmaxCoordRadiusType = new WinMaxCoordRadiusType();

	public DetermineWindowMaxPixelKernel(KernelParameters parameters) {
		super(parameters);

		//// count every cycle in this kernel
		DFEVar cycleCounter = control.count.simpleCounter(MathUtils.bitsToAddress(
				Constant.TOTAL_PIXEL + Constant.PRELOAD_COORDRADIUS));

		/// when to load the coord/radius before pixel
		DFEVar isPreload = cycleCounter < Constant.PRELOAD_COORDRADIUS;

		/// count every input pixel in this kernel
		DFEVar pixelCounter = makePixelCounter(cycleCounter, isPreload);

		/// create pixel coordinate (pixelRowIdx, pixelColIdx)
		Counter _pixelColIdxCount = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(Constant.NUM_PIXEL_IN_IMAGE_ROW))
				.withMax(Constant.NUM_PIXEL_IN_IMAGE_ROW)
				.withEnable(~isPreload));
		DFEVar pixelColIdx = _pixelColIdxCount.getCount();	/// fast dimension

		DFEVar pixelRowIdx = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(Constant.NUM_PIXEL_IN_IMAGE_COL))
				.withMax(Constant.NUM_PIXEL_IN_IMAGE_COL)
				.withEnable(_pixelColIdxCount.getWrap())
				).getCount();	/// slow dimension

		DFEVar isWinFirstCol = KernelMath.modulo(pixelColIdx,
				Constant.NUM_PIXEL_IN_WINDOW_ROW)=== 0;
		DFEVar isWinFirstRow = KernelMath.modulo(pixelRowIdx,
				Constant.NUM_PIXEL_IN_WINDOW_COL) === 0;
		DFEVar isWinFirstRowFirstCol = isWinFirstRow & isWinFirstCol;

		DFEVar possibleCoordRadiusRead = isWinFirstRowFirstCol | isPreload ;
		DFEVar coordRadiusReadCount = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(Constant.TOTAL_WINDOW + 1))
				.withMax(Constant.TOTAL_WINDOW)
				.withEnable(possibleCoordRadiusRead)
				.withWrapMode(WrapMode.STOP_AT_MAX)).getCount();

		DFEVar coordRadiusInputReadEnable = (isPreload | isWinFirstRowFirstCol) &
			coordRadiusReadCount < Constant.TOTAL_WINDOW;

		/// inputs
		DFEStruct maxCoordRadius = io.input("coordRadius", winmaxCoordRadiusType,
				coordRadiusInputReadEnable);
		DFEVar pixel = io.input("pixel", Type.pixelType, ~isPreload);

//		printf(coordRadiusInputReadEnable, "max: %d, radius: %d, (%d, %d)\n", getMaxValue(maxCoordRadius), getRadius(maxCoordRadius), getWinMaxRowIdx(maxCoordRadius), getWinMaxColIdx(maxCoordRadius));

		/// hold the coordinates and radius from kernel 1
		DFEStruct [] coordRadiusHold = new DFEStruct[Constant.TOTAL_WINDOW];
		for (int i = 0; i < coordRadiusHold.length; i++) {
			DFEVar store = (coordRadiusReadCount === i) & coordRadiusInputReadEnable;
			coordRadiusHold[i] = Reductions.streamHold(maxCoordRadius, store);
		}

		StreamMaxInfo [] winMax = new StreamMaxInfo[Constant.TOTAL_WINDOW];
		DFEStructType maxCoordsType = new MaxCoordsType();

		DFEVar isInWindow[] = new DFEVar[Constant.TOTAL_WINDOW];
		for (int i = 0; i < winMax.length; i++) {
			/// data to save
			DFEStruct maxCoord = maxCoordsType.newInstance(this);
			maxCoord[MaxCoordsType.maxPixel] <== pixel;
			maxCoord[MaxCoordsType.maxCoordRowIdx] <== pixelRowIdx;
			maxCoord[MaxCoordsType.maxCoordColIdx] <== pixelColIdx;
			DFEVar metaData = maxCoord.pack();

			/// when to save the pixel
			DFEVar enable = fallInWindow(pixelRowIdx, pixelColIdx, coordRadiusHold[i]);

			winMax[i] = Reductions.streamMaxWithMetadata(pixel, metaData, constant.var(false), enable);

			isInWindow[i] = enable;
		}

		List<DFEVar> winMaxCord = new ArrayList<DFEVar>();
		for (int i = 0; i < winMax.length; i++) {
			winMaxCord.add(winMax[i].getMetaData());
		}

		/// output condition: output at final
		DFEVar isOutputEnable = pixelCounter >= Constant.TOTAL_PIXEL - Constant.TOTAL_WINDOW;
		DFEVar outputAddr = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(Constant.TOTAL_WINDOW))
				.withEnable(isOutputEnable)
				).getCount();

		/// select the one to output
		DFEStruct out = maxCoordsType.unpack(control.mux(outputAddr, winMaxCord));
//		printf(isOutputEnable, "cycle: %d, pixelCounter: %d, windowMax[%d]: %d @ (%d, %d)\n",
//				cycleCounter, pixelCounter, outputAddr,
//				out[MaxCoordsType.maxPixel],
//				out[MaxCoordsType.maxCoordRowIdx],
//				out[MaxCoordsType.maxCoordColIdx]);

		printf(isOutputEnable, "%d %d\n", out[MaxCoordsType.maxCoordColIdx], out[MaxCoordsType.maxCoordRowIdx]);

		DFEType cordType = dfeInt(32);
		io.output("outRow", cordType, isOutputEnable) <== getWinMaxRowIdx(out).cast(cordType);
		io.output("outCol", cordType, isOutputEnable) <== getWinMaxColIdx(out).cast(cordType);
	}

	private DFEVar getWinMaxRowIdx(DFEStruct win) {
		return win[WinMaxCoordRadiusType.maxCoordRowIdx];
	}

	private DFEVar getWinMaxColIdx(DFEStruct win) {
		return win[WinMaxCoordRadiusType.maxCoordColIdx];
	}

	private DFEVar getRadius(DFEStruct win) {
		return win[WinMaxCoordRadiusType.meanRadius];
	}

	private DFEVar distSquare(DFEVar r1, DFEVar c1, DFEVar r2, DFEVar c2) {
		int maxWidth =	Math.max(Math.max(Math.max(
				r1.getType().getTotalBits(), c1.getType().getTotalBits()),
						r2.getType().getTotalBits()),
							c2.getType().getTotalBits());

		DFEType type = dfeUInt(maxWidth * 2);
		r1 = r1.cast(type);
		c1 = c1.cast(type);
		r2 = r2.cast(type);
		c2 = c2.cast(type);

		DFEVar ds = (r1 - r2) * (r1 - r2) + (c1 - c2) * (c1 - c2);

		DFEType retType = dfeUInt(type.getTotalBits() + MathUtils.bitsToAddress(10000));
		return ds.cast(retType) * 10000;
	}

	private DFEVar fallInWindow(DFEVar pixelRowIdx, DFEVar pixelColIdx, DFEStruct win) {
		DFEVar winMaxRowIdx = getWinMaxRowIdx(win);
		DFEVar winMaxColIdx = getWinMaxColIdx(win);
		DFEVar winRadius = getRadius(win);

		DFEVar ds2 = distSquare(pixelRowIdx, pixelColIdx, winMaxRowIdx, winMaxColIdx);
		DFEVar r2 = winRadius.cast(ds2.getType()) * winRadius.cast(ds2.getType());

//		debug.simPrintf("(%d, %d, %d) to (%d, %d, %d)\n", pixelRowIdx, pixelColIdx, ds2, winMaxRowIdx, winMaxColIdx, r2);

		return ds2 <= r2;
	}

	private DFEVar locateWindow(DFEVar pixelRowIdx, DFEVar pixelColIdx) {
		DFEVar winRowIdx = KernelMath.divMod(pixelRowIdx.cast(Type.windowIdxType),
				constant.var(Type.windowIdxType, Constant.NUM_PIXEL_IN_WINDOW_COL)).getQuotient();
		DFEVar winColIdx = KernelMath.divMod(pixelColIdx.cast(Type.windowIdxType),
				constant.var(Type.windowIdxType, Constant.NUM_PIXEL_IN_WINDOW_ROW)).getQuotient();
		return winRowIdx * Constant.NUM_WINDOW_IN_IMAGE_ROW + winColIdx;
	}

	private DFEVar getMaxValue(DFEStruct maxCoordRadius) {
		return maxCoordRadius[WinMaxCoordRadiusType.maxPixel];
	}

	private DFEVar makePixelCounter(DFEVar cycleCounter, DFEVar isPreload) {
		/// count every input pixel in this kernel
		DFEVar pixelCounter = control.count.makeCounter(
				control.count.makeParams(
						MathUtils.bitsToAddress(Constant.TOTAL_PIXEL))
						.withEnable(~isPreload)
						).getCount();
		return pixelCounter;
	}

	private void printf(DFEVar condition, String format, Object...args ) {
		if (DEBUG_ENABLE) {
			debug.simPrintf(condition, "[" + this.getName() + "]:" + format, args);
		}
	}

	private void printf(String format, Object...args ) {
		if (DEBUG_ENABLE) {
			debug.simPrintf(constant.var(true), "[" + this.getName() + "]:" + format, args);
		}
	}

}
