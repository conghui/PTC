/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 3      Name: Moving Average Weighted
 * MaxFile name: MovingAverageWeighted
 * Summary:
 *     Manager for a weighted three point moving average design.
 *  This example has two modes - one with default weighting of
 *  1.0 for each tap, and one with configurable weighting.
 *  All IO is between the CPU and the DFE.
 */
package ptc;

import maxpower.lmem.superfifo.SuperFIFO;
import maxpower.lmem.superfifo.SuperFIFO.FifoIO;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.utils.MemoryManager;

class PalmTreeCountingManager extends CustomManager {

	private static CPUTypes pixelType = CPUTypes.INT32;

	public PalmTreeCountingManager(EngineParameters engineParams) {
		super(engineParams);

		/// set constants
		setConstants(this);

        /// add kernel
		KernelBlock findWinMaxRadiusKernel = addKernel(new FindWindowMaxAndRadiusKernel(
				makeKernelParameters("FindWindowMaxAndRadiusKernel")));
		KernelBlock kernel2 = addKernel(new DetermineWindowMaxPixelKernel(
				makeKernelParameters("DetermineWindowMaxPixelKernel")));

		/// upload data from CPU to LMEM
		DFELink cpu2lmem = addStreamToOnCardMemory("cpu2lmem",
				MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		cpu2lmem <== addStreamFromCPU("imageInput");

		/// kernel 1 get pixels from LMEM
		DFELink lmem2kernel1 = addStreamFromOnCardMemory("lmem2kernel1",
				MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		findWinMaxRadiusKernel.getInput("imageInput") <== lmem2kernel1;

		/// create a superFifo that store the output pixel from kernel 1
		MemoryManager lmemOrganizer = new MemoryManager(this);
		FifoIO superfifo = SuperFIFO.create(this, "superFifo", Type.pixelType, 1024*1024*1024L, lmemOrganizer);

		/// save the pixel to LMEM
		superfifo.write <== findWinMaxRadiusKernel.getOutput("pixel");

		/// connect links for kernel2
		kernel2.getInput("coordRadius") <== findWinMaxRadiusKernel.getOutput("output");
		kernel2.getInput("pixel") <== superfifo.read;

		/// stream back to CPU
		addStreamToCPU("output") <== kernel2.getOutput("output");

		lmemOrganizer.log();
	}


	public static void main(String[] args) {
		validate();
		EngineParameters params = new EngineParameters(args);
		PalmTreeCountingManager manager = new PalmTreeCountingManager(params);
		manager.createSLiCinterface(interfaceWriteLMem("WriteLMem"));
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}

	private static EngineInterface interfaceWriteLMem(String name) {
		EngineInterface ei = new EngineInterface(name);

		InterfaceParam alignedSize = ei.addParam("alignedImageSize", CPUTypes.INT32);

		InterfaceParam alignedImageSizeInBytes = alignedSize * pixelType.sizeInBytes();
		ei.setStream("imageInput", pixelType, alignedImageSizeInBytes);

		InterfaceParam zero = ei.addConstant(0l);
		ei.setLMemLinear("cpu2lmem", zero, alignedImageSizeInBytes);
		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface ei = new EngineInterface();
		InterfaceParam imageSize = ei.addParam("imageSize", CPUTypes.INT32);
		InterfaceParam alignedSize = ei.addParam("alignedImageSize", CPUTypes.INT32);

		ei.setTicks("FindWindowMaxAndRadiusKernel", imageSize);
		ei.setTicks("DetermineWindowMaxPixelKernel", imageSize + Constant.PRELOAD_COORDRADIUS);

		/// configure the lmem2kernel1 LMEM
		InterfaceParam zero = ei.addConstant(0l);
		InterfaceParam alignedImageSizeInBytes = alignedSize * pixelType.sizeInBytes();
		ei.setLMemLinear("lmem2kernel1", zero, alignedImageSizeInBytes);

		ei.setStream("output", pixelType, imageSize * pixelType.sizeInBytes());
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	private void setConstants(CustomManager manager) {
		manager.addMaxFileConstant("NUM_PIXEL_IN_IMAGE_ROW", Constant.NUM_PIXEL_IN_IMAGE_ROW);
		manager.addMaxFileConstant("NUM_PIXEL_IN_IMAGE_COL", Constant.NUM_PIXEL_IN_IMAGE_COL);
		manager.addMaxFileConstant("NUM_PIXEL_IN_WINDOW_ROW", Constant.NUM_PIXEL_IN_WINDOW_ROW);
		manager.addMaxFileConstant("NUM_PIXEL_IN_WINDOW_COL", Constant.NUM_PIXEL_IN_WINDOW_COL);
		manager.addMaxFileConstant("NUM_WINDOW_IN_IMAGE_ROW", Constant.NUM_WINDOW_IN_IMAGE_ROW);
		manager.addMaxFileConstant("NUM_WINDOW_IN_IMAGE_COL", Constant.NUM_WINDOW_IN_IMAGE_COL);
		manager.addMaxFileConstant("MAX_CIRCLE_RADIUS", Constant.MAX_CIRCLE_RADIUS);
	}

	private static void validate() {
		if (Constant.NUM_PIXEL_IN_IMAGE_COL != Constant.NUM_PIXEL_IN_WINDOW_COL * Constant.NUM_WINDOW_IN_IMAGE_COL) {
			System.err.println("Constant.NUM_PIXEL_IN_IMAGE_COL != Constant.NUM_PIXEL_IN_WINDOW_COL * Constant.NUM_WINDOW_IN_IMAGE_COL");
			System.exit(1);
		}

		if (Constant.NUM_PIXEL_IN_IMAGE_ROW != Constant.NUM_PIXEL_IN_WINDOW_ROW * Constant.NUM_WINDOW_IN_IMAGE_ROW) {
			System.err.println("Constant.NUM_PIXEL_IN_IMAGE_ROW != Constant.NUM_PIXEL_IN_WINDOW_ROW * Constant.NUM_WINDOW_IN_IMAGE_ROW");
			System.exit(1);
		}
	}
}
