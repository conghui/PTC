/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 3      Name: Moving Average Weighted
 * MaxFile name: MovingAverageWeighted
 * Summary:
 *     Manager for a weighted three point moving average design.
 *  This example has two modes - one with default weighting of
 *  1.0 for each tap, and one with configurable weighting.
 *  All IO is between the CPU and the DFE.
 */
package ptc;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;

class PalmTreeCountingManager {

	static final int maxWindowSize = 9;
	static final float defaultWeight = 1.0f;

	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel = new FindWindowMaxAndRadiusKernel(
				manager.makeKernelParameters());
//		manager.addMaxFileConstant("maxWindowSize", maxWindowSize);
		manager.setKernel(kernel);
		manager.setIO(IOType.ALL_CPU);
		manager.createSLiCinterface(interfaceDefault());
//		manager.createSLiCinterface(interfaceVariable());
		manager.build();
	}

	static EngineInterface interfaceDefault() {
		EngineInterface ei = new EngineInterface(
				"default",
				"Runs moving average with no weighting.");
		InterfaceParam imageSize = ei.addParam("imageSize", CPUTypes.INT32);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "size", size);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight0", defaultWeight);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight1", defaultWeight);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight2", defaultWeight);
		ei.setTicks("FindWindowMaxAndRadiusKernel", imageSize);

		CPUTypes pixelType = CPUTypes.INT32;
		ei.setStream("imageInput", pixelType, imageSize * pixelType.sizeInBytes());
		ei.setStream("output", pixelType, imageSize * pixelType.sizeInBytes());
		return ei;
	}

//	static EngineInterface interfaceDefault() {
//		EngineInterface ei = new EngineInterface(
//				"default",
//				"Runs moving average with no weighting.");
//		InterfaceParam size = ei.addParam("size", CPUTypes.INT32);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "size", size);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight0", defaultWeight);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight1", defaultWeight);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight2", defaultWeight);
//		ei.setTicks("FindWindowMaxAndRadiusKernel", size);
//		ei.setStream("x", CPUTypes.FLOAT, size * CPUTypes.FLOAT.sizeInBytes());
//		ei.setStream("y", CPUTypes.FLOAT, size * CPUTypes.FLOAT.sizeInBytes());
//		return ei;
//	}

//	static EngineInterface interfaceVariable() {
//		EngineInterface ei = new EngineInterface("weighted",
//				"Runs moving average with weighting.");
//		InterfaceParam size = ei.addParam("size", CPUTypes.INT32);
//		InterfaceParamArray weights = ei.addParamArray("weights", CPUTypes.FLOAT);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "size", size);
//		ei.setTicks("FindWindowMaxAndRadiusKernel", size);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight0", weights[0]);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight1", weights[1]);
//		ei.setScalar("FindWindowMaxAndRadiusKernel", "weight2", weights[2]);
//		ei.setStream("x", CPUTypes.FLOAT, size * CPUTypes.FLOAT.sizeInBytes());
//		ei.setStream("y", CPUTypes.FLOAT, size * CPUTypes.FLOAT.sizeInBytes());
//		return ei;
//	}
}
