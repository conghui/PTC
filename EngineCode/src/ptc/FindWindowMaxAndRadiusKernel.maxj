/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 3      Name: Moving Average Weighted
 * MaxFile name: MovingAverageWeighted
 * Summary:
 *       Computes a weighted three point moving average using
 *  zero at boundaries. The weights for the three taps are
 *  passed in as scalar inputs.
 */
package ptc;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class FindWindowMaxAndRadiusKernel extends Kernel {

	FindWindowMaxAndRadiusKernel(KernelParameters parameters, int maxWindowSize) {
		super(parameters);

		// Input
		DFEVar x = io.input("x", dfeFloat(8, 24));

		DFEVar size = io.scalarInput("size", dfeUInt(32));

		DFEVar weight0 = io.scalarInput("weight0", dfeFloat(8, 24));
		DFEVar weight1 = io.scalarInput("weight1", dfeFloat(8, 24));
		DFEVar weight2 = io.scalarInput("weight2", dfeFloat(8, 24));

		// Data
		DFEVar prevOriginal = stream.offset(x, -1);
		DFEVar nextOriginal = stream.offset(x, 1);

		// Control
		DFEVar count = control.count.simpleCounter(32, size);

		DFEVar aboveLowerBound = count > 0;
		DFEVar belowUpperBound = count < size - 1;

		DFEVar withinBounds = aboveLowerBound & belowUpperBound;

		DFEVar prev = aboveLowerBound ? prevOriginal : 0;
		DFEVar next = belowUpperBound ? nextOriginal : 0;

		DFEVar prevWeighted = prev*weight0;
		DFEVar nextWeighted = next*weight2;
		DFEVar xWeighted = x*weight1;

		DFEVar divisor = withinBounds ? constant.var(dfeFloat(8, 24), 3) : 2;

		DFEVar sum = prevWeighted + xWeighted + nextWeighted;
		DFEVar result = sum / divisor;

		io.output("y", result, dfeFloat(8, 24));


	}
}
