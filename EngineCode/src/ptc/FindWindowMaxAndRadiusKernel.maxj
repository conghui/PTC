/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 3      Name: Moving Average Weighted
 * MaxFile name: MovingAverageWeighted
 * Summary:
 *       Computes a weighted three point moving average using
 *  zero at boundaries. The weights for the three taps are
 *  passed in as scalar inputs.
 */
package ptc;

import java.util.ArrayList;
import java.util.List;

import maxpower.ops.AssociativeOp;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class FindWindowMaxAndRadiusKernel extends Kernel {
	private static final boolean DEBUG_ENABLE = false;
	private static DFEType pixelType = Type.pixelType;
	private final  CoordRadiusType coordRadiusType = new CoordRadiusType();
	private final WinMaxCoordRadiusType winmaxCoordRadiusType = new WinMaxCoordRadiusType();
	private final DFEVar imageCordRowIdx;	/// slow dimension
	private final DFEVar imageCordColIdx; 	/// fast dimension

	FindWindowMaxAndRadiusKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar pixel = io.input("imageInput", pixelType);
		DFEVar cycleCounter = control.count.simpleCounter(32);

		/// this counter counts from 0 to NUM_PIXEL_IN_IMAGE_ROW
		DFEVar imageRowCounter = control.count.simpleCounter(
				MathUtils.bitsToAddress(Constant.NUM_PIXEL_IN_IMAGE_ROW),
				Constant.NUM_PIXEL_IN_IMAGE_ROW);


		int numPixelInWindowStride = Constant.NUM_PIXEL_IN_IMAGE_ROW * Constant.NUM_PIXEL_IN_WINDOW_COL;


		DFEVar pixelInWindowStrideCounter = control.count.simpleCounter(
				MathUtils.bitsToAddress(numPixelInWindowStride),
				numPixelInWindowStride);

		//////////////////////////////// use streamHold /////////////////////////////
		CounterChain imageCordCounterChain = control.count.makeCounterChain();
		imageCordRowIdx = imageCordCounterChain.addCounter(Constant.NUM_PIXEL_IN_IMAGE_COL, 1); /// slow dimension
		imageCordColIdx = imageCordCounterChain.addCounter(Constant.NUM_PIXEL_IN_IMAGE_ROW, 1); /// fast dimension

		//////////////////////////////// find the average radius ////////////////
		DFEVar meanRadius = calMeanRadius(pixel, withinRegion(imageCordRowIdx, imageCordColIdx));

		Reductions.StreamMaxInfo[] windowMax = new Reductions.StreamMaxInfo[Constant.NUM_WINDOW_IN_IMAGE_ROW];
		for (int i = 0; i < windowMax.length; i++) {
			/// save the current coordinate and the mean radius along with the pixel
			DFEStruct coordRadius = coordRadiusType.newInstance(this);
			coordRadius[CoordRadiusType.maxCoordColIdx] <== imageCordColIdx;
			coordRadius[CoordRadiusType.maxCoordRowIdx] <== imageCordRowIdx;
			coordRadius[CoordRadiusType.meanRadius] <== meanRadius;

			DFEVar metaData = coordRadius.pack();
			DFEVar reset = pixelInWindowStrideCounter === i * Constant.NUM_PIXEL_IN_WINDOW_ROW;
			DFEVar enable = KernelMath.divMod(imageRowCounter, constant.var(imageRowCounter.getType(),
					Constant.NUM_PIXEL_IN_WINDOW_ROW)).getQuotient() === i;
			windowMax[i] = Reductions.streamMaxWithMetadata(pixel, metaData, reset, enable);
		}

		ArrayList<DFEStruct> winMaxCoordRadiusList = new ArrayList<DFEStruct>();
		for (int i = 0; i < windowMax.length; i++) {
			DFEStruct mcr = winmaxCoordRadiusType.newInstance(this);
			DFEStruct coordRadius = coordRadiusType.unpack(windowMax[i].getMetaData());

			/// connect the maxPixel, coordinate and radius
			mcr[WinMaxCoordRadiusType.maxPixel] <== windowMax[i].getMax();
			mcr[WinMaxCoordRadiusType.maxCoordRowIdx] <== coordRadius[CoordRadiusType.maxCoordRowIdx];
			mcr[WinMaxCoordRadiusType.maxCoordColIdx] <== coordRadius[CoordRadiusType.maxCoordColIdx];
			mcr[WinMaxCoordRadiusType.meanRadius] <== coordRadius[CoordRadiusType.meanRadius];

			//// add the to the list
			winMaxCoordRadiusList.add(mcr);
		}


		/// output condition
		int numPixelInWindowStrideExceptLastRow = numPixelInWindowStride - Constant.NUM_PIXEL_IN_IMAGE_ROW;
		DFEVar isOutputRow = KernelMath.modulo(cycleCounter, numPixelInWindowStride) >= numPixelInWindowStrideExceptLastRow;
		DFEVar lastRowInWindowCount = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(Constant.NUM_PIXEL_IN_WINDOW_ROW))
				.withEnable(isOutputRow)
				.withMax(Constant.NUM_PIXEL_IN_WINDOW_ROW)
				).getCount();
		DFEVar isOutputWindowMax = lastRowInWindowCount === Constant.NUM_PIXEL_IN_WINDOW_ROW - 1;

		DFEVar outputCounter = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToAddress(windowMax.length))
				.withEnable(isOutputWindowMax)
				).getCount();

		DFEStruct outData = control.mux(outputCounter, winMaxCoordRadiusList);
		printf(isOutputWindowMax, "output:: winMax: %d, cord(%d, %d), radius: %d\n",
				outData[WinMaxCoordRadiusType.maxPixel],
				outData[WinMaxCoordRadiusType.maxCoordRowIdx],
				outData[WinMaxCoordRadiusType.maxCoordColIdx],
				outData[WinMaxCoordRadiusType.meanRadius]);

		io.output("output", outData.getType(), isOutputWindowMax) <== outData;
	}


	/**
	 * Remember the radius stored will be multiplied by 100 so that we can store 1.41 as 141
	 * to avoid storing floating point numbers
	 */
	private static class DiffRadiusType extends DFEStructType {
		private static String diffValue = "diffValue";
		private static String radius = "radius";


		public DiffRadiusType() {
			super(sft(diffValue, pixelType),sft(radius, Type.radiusType));
		}
	}

	private static class RadiusMax implements AssociativeOp<DFEVar> {
		@Override
		public DFEVar op(DFEVar a, DFEVar b) {
			DiffRadiusType type = new DiffRadiusType();
			DFEVar value_a = type.unpack(a)[DiffRadiusType.diffValue];
			DFEVar value_b = type.unpack(b)[DiffRadiusType.diffValue];

			return value_a > value_b ? a : b;
		}

	}

	private static class Add implements AssociativeOp<DFEVar> {
		@Override
		public DFEVar op(DFEVar a, DFEVar b) {
			return a + b;
		}

	}

	private DFEVar getRadius(DFEVar diffRadius) {
		DFEStruct eastMaxInfo = new DiffRadiusType().unpack(diffRadius);
		return eastMaxInfo[DiffRadiusType.radius];
	}

	private DFEVar calMaxDiffAlongDirection(DFEVar pixel, int stride, int[] radius) {
		List<DFEVar> distList = new ArrayList<DFEVar>();
		DFEVar dist = KernelMath.abs(stream.offset(pixel, stride) - pixel);

		for (int i = 0; i < Constant.MAX_CIRCLE_RADIUS; i++) {
			DFEStruct distInfo = new DiffRadiusType().newInstance(this);
			distInfo[DiffRadiusType.diffValue] <== stream.offset(dist, i * stride);
			distInfo[DiffRadiusType.radius] <== constant.var(Type.radiusType, radius[i]);
			distList.add(distInfo.pack());
		}

		return TreeReduce.reduce(new RadiusMax(), distList);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along east direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along east direction. Usually 0, 100, 200, 300...
	 * @return the value is represented as DiffRadiusType.pack
	 */
	private DFEVar calMaxDiffEast(DFEVar pixel, int[] radius) {
		int stride = 1;
		return calMaxDiffAlongDirection(pixel, stride, radius);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along west direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along west direction. Usually 0, 100, 200, 300...
	 * @return the value is represented as DiffRadiusType.pack
	 */
	private DFEVar calMaxDiffWest(DFEVar pixel, int[] radius) {
		int stride = -1;
		return calMaxDiffAlongDirection(pixel, stride, radius);
	}


	/**
	 * calculate the maximal difference of two adjacent pixel along south direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along south direction. Usually 0, 100, 200, 300...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffSouth(DFEVar pixel, int[] radius) {
		int stride = Constant.NUM_PIXEL_IN_IMAGE_ROW;
		return calMaxDiffAlongDirection(pixel, stride, radius);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along north direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along north direction. Usually 0, 100, 200, 300...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffNorth(DFEVar pixel, int[] radius) {
		int stride = -Constant.NUM_PIXEL_IN_IMAGE_ROW;
		return calMaxDiffAlongDirection(pixel, stride, radius);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along northeast direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along northeast direction. Usually 0, 141, 282, 423...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffNorthEast(DFEVar pixel, int[] radiusDiagnal) {
		int nextStride = -(Constant.NUM_PIXEL_IN_IMAGE_ROW - 1);
		return calMaxDiffAlongDirection(pixel, nextStride, radiusDiagnal);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along northwest direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along northwest direction. Usually 0, 141, 282, 423...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffNorthWest(DFEVar pixel, int[] radiusDiagnal) {
		int nextStride = -(Constant.NUM_PIXEL_IN_IMAGE_ROW + 1);
		return calMaxDiffAlongDirection(pixel, nextStride, radiusDiagnal);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along southeast direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along southeast direction. Usually 0, 141, 282, 423...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffSouthEast(DFEVar pixel, int[] radiusDiagnal) {
		int nextStride = (Constant.NUM_PIXEL_IN_IMAGE_ROW + 1);
		return calMaxDiffAlongDirection(pixel, nextStride, radiusDiagnal);
	}

	/**
	 * calculate the maximal difference of two adjacent pixel along sourthwest direction
	 * @param pixel pixel of current cycle
	 * @param radius radius (multiplied by 100) along sourthwest direction. Usually 0, 141, 282, 423...
	 * @return the value is represented as DiffRadiusType.pack()
	 */
	private DFEVar calMaxDiffSouthWest(DFEVar pixel, int[] radiusDiagnal) {
		int nextStride = (Constant.NUM_PIXEL_IN_IMAGE_ROW - 1);
		return calMaxDiffAlongDirection(pixel, nextStride, radiusDiagnal);
	}

	private DFEVar fixRadius(DFEVar radius) {
		return withinRegion(imageCordRowIdx, imageCordColIdx) ? radius : 0;
	}

	private DFEVar calMeanRadius(DFEVar pixel, DFEVar debugEnable) {
		/// radius for east, west, north, south
		int[] radius = new int[Constant.MAX_CIRCLE_RADIUS];
		int [] radiusDiagnal = radius.clone();
		for (int i = 0; i < Constant.MAX_CIRCLE_RADIUS; i++) {
			radius[i] = (i+1)*100;
			radiusDiagnal[i] = (i+1)*141;	//// (i+1) * sqrt(2) * 100
		}

		List<DFEVar> maxInfoInCircle = new ArrayList<DFEVar>();

		//// east direction
		maxInfoInCircle.add(calMaxDiffEast(pixel, radius));	/// east
		maxInfoInCircle.add(calMaxDiffWest(pixel, radius));	/// west
		maxInfoInCircle.add(calMaxDiffSouth(pixel, radius));	/// south
		maxInfoInCircle.add(calMaxDiffNorth(pixel, radius)); 	/// north
		maxInfoInCircle.add(calMaxDiffNorthEast(pixel, radiusDiagnal)); /// northeast
		maxInfoInCircle.add(calMaxDiffNorthWest(pixel, radiusDiagnal)); /// northwest
		maxInfoInCircle.add(calMaxDiffSouthEast(pixel, radiusDiagnal)); /// southeast
		maxInfoInCircle.add(calMaxDiffSouthWest(pixel, radiusDiagnal)); /// southwest

		List<DFEVar> maxRadiusInCircle = new ArrayList<DFEVar>();
		for (DFEVar info : maxInfoInCircle) {
			DFEType summationType = dfeUInt(16);
			maxRadiusInCircle.add(getRadius(info).cast(summationType));
		}
		DFEVar radiusMean = TreeReduce.reduce(new Add(), maxRadiusInCircle) / maxRadiusInCircle.size();
		radiusMean = radiusMean.cast(Type.radiusType);

		/////////////// DEBUG INFO //////////////////
		DFEStruct eastMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(0));
		DFEStruct westMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(1));
		DFEStruct southMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(2));
		DFEStruct northMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(3));
		DFEStruct NEMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(4));
		DFEStruct NWMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(5));
		DFEStruct SEMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(6));
		DFEStruct SWMaxInfo = new DiffRadiusType().unpack(maxInfoInCircle.get(7));
		printf(debugEnable,
				"pixel: %d, East(%d, %d), West(%d, %d), South(%d, %d), North(%d, %d), NE(%d, %d), NW(%d, %d), SE(%d, %d), SW(%d, %d), meanRadius: %d\n",pixel,
				eastMaxInfo[DiffRadiusType.diffValue], eastMaxInfo[DiffRadiusType.radius],
				westMaxInfo[DiffRadiusType.diffValue], westMaxInfo[DiffRadiusType.radius],
				southMaxInfo[DiffRadiusType.diffValue], southMaxInfo[DiffRadiusType.radius],
				northMaxInfo[DiffRadiusType.diffValue], northMaxInfo[DiffRadiusType.radius],
				NEMaxInfo[DiffRadiusType.diffValue], NEMaxInfo[DiffRadiusType.radius],
				NWMaxInfo[DiffRadiusType.diffValue], NWMaxInfo[DiffRadiusType.radius],
				SEMaxInfo[DiffRadiusType.diffValue], SEMaxInfo[DiffRadiusType.radius],
				SWMaxInfo[DiffRadiusType.diffValue], SWMaxInfo[DiffRadiusType.radius],
				radiusMean
				);

		return fixRadius(radiusMean);
	}

	private DFEVar withinRegion(DFEVar rowIdx, DFEVar colIdx) {
		return
		rowIdx >= Constant.MAX_CIRCLE_RADIUS &
		rowIdx < Constant.NUM_PIXEL_IN_IMAGE_COL - Constant.MAX_CIRCLE_RADIUS &
		colIdx >= Constant.MAX_CIRCLE_RADIUS &
		colIdx < Constant.NUM_PIXEL_IN_IMAGE_ROW - Constant.MAX_CIRCLE_RADIUS;
	}

	private void printf(DFEVar condition, String format, Object...args ) {
		if (DEBUG_ENABLE) {
			debug.simPrintf(condition, "[" + this.getName() + "]:" + format, args);
		}
	}
}
